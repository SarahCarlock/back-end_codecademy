Passport.js is a flexible authentication middleware for Node.js that can be added to any Express-based application. With Passport.js we can implement authentication using the concept of strategies.
    Passport strategies are separate modules created to work with different means of authentication. Passport is a very extensible middleware, and it allows you to plug in over 300 different authentication 
    providers like Facebook, Twitter, Google, and more.
    In order to offer Passport-supported authentication, we’ll need to install and configure the strategies modules that we’d like to use. In this lesson, we’ll be focusing on a local Passport strategy, 
    passport-local, and authenticating users using a username and password.

npm install passport passport-local
    const passport = require("passport");
    const LocalStrategy = require("passport-local").Strategy;
    app.use(passport.initialize());
        --passport is a middleware and must be implemented using app.use() 
        --method initializes the authentication module across our app
    app.use(passport.session()); 
    --session() middleware alters the request object and is able to attach a ‘user’ value that can be retrieved from the session id.

passport.use(new LocalStrategy(
  function (username, password, done) {
    // Look up user in the db
    db.users.findByUsername(username, (err, user) => {
      // If there's an error in db lookup, 
      // return err callback function
      if(err) return done(err);

      // If user not found, 
      // return null and false in callback
      if(!user) return done(null, false);

      // If user found, but password not valid, 
      // return err and false in callback
      if(user.password != password) return done(null, false);

      // If user found and password valid, 
      // return the user object in callback
      return done(null, user)
    });
  })
);

passport.use(new LocalStrategy(
  function (username, password, done) {
    db.users.findByUsername(username, (err, user) => {
      if (err) return done(err);
      if (!user) return done(null, false);
      if (user.password != password) return done(null, false);
      return done(null, user);
    })
  }
))

Serializing a user determines which data of the user object should be stored in the session, usually the user id. The serializeUser() function sets an id as the cookie in the user’s browser,
    When we serialize a user, Passport takes that user id and stores it internally on req.session.passport which is Passport’s internal mechanism to keep track of things.
    passport.serializeUser((user, done) => {
        done(null, user.id);
        });
        The first argument in the done() function is an error object. In this case, since there was no error we pass null as the argument. 
        For the second argument, we pass in the value that we want to store in our Passport’s internal session, the user id.
        req.session.passport.user = {id: 'xyz'} 
DeserializeUser() function uses the id to look up the user in the database and retrieve the user object with data.
    passport.deserializeUser((id, done) => {
    // Look up user id in database. 
    db.users.findById(id, function (err, user) {
        if (err) return done(err); 
        done(null, user);
    });
    });
    we pass the key that was used when we initially serialized a user (id). The id is used to look up the user in storage, 
    and the fetched object is attached to the request object as req.user across our whole application.

Review
What strategies are and how to use a local strategy to authenticate users with a username and password.

How to configure the local strategy as middleware in passport.

How to manage persistent logins using serializeUser() and deserializeUser().

How to use the passport.authenticate() middleware for login endpoints.

How to log out a user through the logout() function that’s exposed in the request object.