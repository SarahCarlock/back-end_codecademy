When testing an application, feature tests expose required tests or implementations at different levels of the application technology stack. One of those levels is the backend server.
    Server tests are used to test the server response only, not any front-end rendering of code or user interactions. We “disconnect” the browser and interact directly with the server using requests. 
    The tests define the expected behavior of the interactions and check the actual responses against what we expect.
    Server tests are commonly used to test API responses, but we also use server tests for any server response that our application relies on. This can include checking status codes and error messages.
    In this lesson, we introduce a suite of technologies and concepts for performing testing on a JavaScript-based server. These include Chai, jsdom, and SuperTest. 
    We also review how to use async/await for asynchronous calls. When adapting this to your project, it needs to be tailored to match the specific technology stack for your project.

Chai - a library for extending the built in Node assertion library
jsdom - a library for interacting and testing the DOM returned by the server (this functionality is encapsulated in our parseTextFromHTML helper function).
async / await - a pattern for making asynchronous code more readable
SuperTest - a library for making Node server requests and testing their responses

Which technology allows us to write easy-to-read asynchronous code? Async/await
which technology allows us to write assertions against HTML DOM content? jsdom
const pets = '<html><div id="dog"></div><div id="cat">Spot</div><html>';
const dogName = 'Spot';
Why is the following test failing?
    const pets = '<html><div id="dog"></div><div id="cat">Spot</div><html>';
    const dogName = 'Spot';
    assert.include(parseTextFromHTML(pets, '#dog'), dogName);
    --> dogName is contained within the response, but it is not inside the correct element, #dog
Which technology extends the assertion library of Node.js and provides assertion methods like .include() and .notInclude()? Chai
Which technology allows us to write assertions against Node.js server responses? SuperTest
What is the following code asserting?
    const foo = "codecademy";
    const bar = "decade";
    assert.include(foo, bar);
    --> this is asserting that the string "decade" is contained within the string "codecademy".